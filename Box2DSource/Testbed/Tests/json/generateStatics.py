# Generates C files of static variables using the already built C classes 
# from the JSON provided by Angry Birds Chrome.

import json

DEFAULT_maxHealth = -1

source = "// NOTE: AUTO-GENERATED BY generateStatics.py\n\n\
#include <string>\n\
#include <iostream>\n\
#include \"Object.h\"\n\n\
#define DEBUGGING true\n\n"

# The materials to import, and mapping: map[ Material_parameter_num ] = json_parameter
usefulMats = [ "SLINGSHOT",
               "BIRD_RED", "BIRD_YELLOW", "BIRD_BLUE", "BIRD_WHITE", "BIRD_BLACK", "BIRD_GREEN", "BIRD_REDBIG",
               "PIG_BASIC_SMALL", "PIG_BASIC_MEDIUM", "PIG_BASIC_BIG", "PIG_KING", "PIG_MUSTACHE", "PIG_HELMET",
               "BLOCK_WOOD", "BLOCK_SNOW", "BLOCK_SNOW_STATIC", "BLOCK_ICE", "BLOCK_STONE",
               "GROUND_HILLS", "TEXTURE_HILLS", "ESTRADE", "GROUND_SNOW"
             ]
matMapping = [ "bodyType", "defense", "density", "friction", "restitution", "strength" ]

# The shapes to import, and mapping { json_name : c_name, ... }
usefulShapes = []

# The objects to import, and mapping { json_name : c_name, ... }
usefulObjs = [ "SLINGSHOT",
               "BIRD_RED", "BIRD_YELLOW", "BIRD_BLUE", "BIRD_WHITE", "BIRD_BLACK", "BIRD_GREEN", "BIRD_REDBIG",
               "PIG_BASIC_SMALL", "PIG_BASIC_MEDIUM", "PIG_BASIC_BIG", "PIG_KING", "PIG_MUSTACHE", "PIG_HELMET",
               "GROUND_HILLS", "GROUND_SNOW",
               "TERRAIN_TEXTURED_HILLS_1X1", "TERRAIN_TEXTURED_HILLS_5X2", "TERRAIN_TEXTURED_HILLS_5X5", "TERRAIN_TEXTURED_HILLS_10X2", "TERRAIN_TEXTURED_HILLS_10X10", "TERRAIN_TEXTURED_HILLS_32X2",
               "MISC_ESTRADE_7X2", "MISC_ESTRADE_9X3", "MISC_ESTRADE_11X3", "MISC_ESTRADE_1X2", "MISC_ESTRADE_2X2", 
               "WOOD_BLOCK_1X1", "WOOD_BLOCK_2X1", "WOOD_BLOCK_2X2", "WOOD_BLOCK_4X1", "WOOD_BLOCK_4X2", "WOOD_BLOCK_4X4_HOLLOW", "WOOD_BLOCK_8X1", "WOOD_BLOCK_10X1", "WOOD_CIRCLE_2X2", "WOOD_CIRCLE_4X4", "WOOD_TRIANGLE_4X4", "WOOD_TRIANGLE_4X4_HOLLOW", 
               "STONE_BLOCK_1X1", "STONE_BLOCK_2X1", "STONE_BLOCK_2X2", "STONE_BLOCK_4X1", "STONE_BLOCK_4X2", "STONE_BLOCK_4X4_HOLLOW", "STONE_BLOCK_8X1", "STONE_BLOCK_10X1", "STONE_CIRCLE_2X2", "STONE_CIRCLE_4X4", "STONE_TRIANGLE_4X4", "STONE_TRIANGLE_4X4_HOLLOW",
               "ICE_BLOCK_1X1", "ICE_BLOCK_2X1", "ICE_BLOCK_2X2", "ICE_BLOCK_4X1", "ICE_BLOCK_4X2", "ICE_BLOCK_4X4_HOLLOW", "ICE_BLOCK_8X1", "ICE_BLOCK_10X1", "ICE_CIRCLE_2X2", "ICE_CIRCLE_4X4", "ICE_TRIANGLE_4X4", "ICE_TRIANGLE_4X4_HOLLOW"
             ]
             
objMapping = [ "type", "material", "shape", "score", "editorGroup" ]
birdMapping = objMapping + [ "damagedFrameCount", "maxHealth" ]
blockMapping = objMapping + [ "maxHealth" ]
terrainMapping = objMapping + [ "damagedFrameCount" ]
pigMapping = objMapping + [ "maxHealth" ]

classMap = { "GROUND" : "Object", "SLINGSHOT" : "Object", "BIRD" : "Bird", "PIG" : "Pig", "BLOCK_STATIC" : "Terrain", "BLOCK_MISC": "Terrain", "BLOCK_BASIC" : "Block" }
classParamMap = { "Object" : objMapping, "Bird" : birdMapping, "Block" : blockMapping, "Terrain" : terrainMapping, "Pig" : pigMapping }

#typeMaps = { "GROUND" : objMapping, "SLINGSHOT" : slingshotMapping, "BIRD" : birdMapping, "PIG" : pigMapping, "BLOCK_STATIC" : terrainMapping, "BLOCK_MISC" : terrainMapping, "BLOCK_BASIC" : blockMapping }
#objMapping = [ "type", "material", "shape", "score", "editorGroup" ]



source = source + "class ObjectStaticsClass\n\
{\n\
    public:\n\
    static Material* createMaterial( std::string materialKey )\n\
    {\n\
        Material* returnMaterial;\n\
        "

matFile = open('Materials.json','r')
matJson = matFile.read()
matParsed = json.loads(matJson)

# Start Material Generation
#source = source + "std::map<std::string, Material> ObjectStaticsClass::materialStatics[ " + str(len(usefulMats)) + " ] = \n{ \n    "

for mat in usefulMats:
    currentMat = matParsed[mat]
    source = source + "if( materialKey == \"" + str(mat) + "\" ) {\n\
            returnMaterial = new Material( "
    for parameter in matMapping:
        currentParameter = currentMat[parameter]
        
        # For bodyType: DYNAMIC=0, STATIC=1
        if parameter == "bodyType" and currentParameter == "DYNAMIC":
            currentParameter="'0'"
        elif parameter == "bodyType" and currentParameter == "STATIC":
            currentParameter="'1'"
        
        # Add the parameter and comma unless last element
        if parameter == matMapping[len(matMapping)-1]:
            source = source + str(currentParameter) + " "
        else:
            source = source + str(currentParameter) + ", "
    # Add the mat and comma unless last element, then add closing bracket
    if mat == usefulMats[len(usefulMats)-1]:
        source = source +  " );\n\
        } else {\n\
            returnMaterial = new Material( '0', 0, 0, 0, 0, 0 );\n\
        }\n\n\
        if( DEBUGGING ) {\n\
            std::cout << \"Material: \" + materialKey << std::endl; \n\
        }\n\n\
        return returnMaterial;\n\
    }\n\n"
    else:
        source = source + ");\n\
        } else "


source = source + "    static Shape* createShape( std::string shapeKey )\n\
    {\n\
        Shape* returnShape;\n\
        "

# Start Shape Generation
# TODO: ADD POLYGONS
shapeFile = open('Shapes.json','r')
shapeJson = shapeFile.read()
shapeParsed = json.loads(shapeJson)

i = 0

for shape in shapeParsed:
    currentShape = shapeParsed[shape]
    currentType = str(currentShape["type"])
    
    if currentType == "CIRCLE":
        currentClass = "Circle"
    elif currentType == "RECTANGLE":
        currentClass = "Rect"
    elif currentType == "POLYGON":
        currentClass = "Poly"
    
    source = source + "if( shapeKey == \"" + str(shape) + "\" ) {\n\
            returnShape = new " + currentClass + "( "
    
    if currentClass == "Circle":
        source = source + str( currentShape["radius"] ) + ", " + str( currentShape["offsetX"] ) + ", " + str( currentShape["offsetY"] )
    elif currentClass == "Rectangle":
        source = source + str( currentShape["width"] ) + ", " + str( currentShape["height"] )
    elif currentClass == "Poly":
        source = source + " "
    
    # Add the obj and comma unless last element, then add closing bracket
    if i == len(shapeParsed)-1:
        source = source +  " );\n\
        }\n\
        if( DEBUGGING ) {\n\
            std::cout << \"Shape: \" + shapeKey << std::endl; \n\
        }\n\n\
        return returnShape;\n\
    }\n\n"
    else:
        source = source + " );\n\
        } else "
    i+=1


        
        
# Start Object Generation
objFile = open('Objects.json','r')
objJson = objFile.read()
objParsed = json.loads(objJson)

source = source + "    static Object* createObject( std::string objectKey )\n\
    {\n\
        Object* returnObject;\n\
        "

for obj in usefulObjs:
    currentObj = objParsed[obj]
    currentType = str(currentObj["type"])
    
    # Add missing parameters for Object classes
    if currentType == "SLINGSHOT":
        currentObj["editorGroup"] = "SLINGSHOT"
    if obj == "BIRD_GREEN" or obj == "BIRD_REDBIG":
        currentObj["maxHealth"] = DEFAULT_maxHealth
    
    currentClass = classMap[currentType]
    objMap = classParamMap[currentClass]
    
    source = source + "if( objectKey == \"" + str(obj) + "\" ) {\n\
            returnObject = new " + currentClass + "( "
    
    for parameter in objMap:
        currentParameter = currentObj[parameter]
        
        # Translate parameters into C syntax
        if parameter == "type" or parameter == "editorGroup":
            # std::string
            currentParameter = "\"" + currentParameter + "\""
        elif parameter == "score" or parameter == "damagedFrameCount" or parameter == "maxHealth":
            # double - redundant but for completeness
            currentParameter = currentParameter
        elif parameter == "material":
            # Material
            currentParameter = "createMaterial( \"" + currentParameter + "\" )"
        elif parameter == "shape":
            # Shape
            currentParameter = "createShape( \"" + currentParameter + "\" )"
        else:
            print "Error: Invalid Parameter ("+parameter+")"
        
        # Add the parameter and comma unless last element
        if parameter == objMap[len(objMap)-1]:
            source = source + str(currentParameter) + " "
        else:
            source = source + str(currentParameter) + ", "
    
    # Add the obj and comma unless last element, then add closing bracket
    if obj == usefulObjs[len(usefulObjs)-1]:
        source = source +  " );\n\
        } else {\n\
            returnObject = new Object( \"SLINGSHOT\", createMaterial( \"SLINGSHOT\" ), new Shape( \"SLINGSHOT\" ), 0, \"SLINGSHOT\" );\n\
        }\n\n\
        if( DEBUGGING ) {\n\
            std::cout << \"Object: \" + objectKey << std::endl; \n\
        }\n\n\
        return returnObject;\n\
    }\n"
    else:
        source = source + ");\n\
        } else "

source = source + "};"

staticOut = file('staticsout.txt','w')
staticOut.write(source)

print source











